<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="AppiumLibrary" type="LIBRARY" format="ROBOT" scope="GLOBAL" generated="2021-08-31T05:45:23Z" specversion="3" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\__init__.py" lineno="10">
<version>1.6.2</version>
<doc>AppiumLibrary is a Mobile App testing library for Robot Framework.

= Locating or specifying elements =

All keywords in AppiumLibrary that need to find an element on the page
take an argument, either a ``locator`` or a ``webelement``. ``locator``
is a string that describes how to locate an element using a syntax
specifying different location strategies. ``webelement`` is a variable that
holds a WebElement instance, which is a representation of the element.

== Using locators ==

By default, when a locator is provided, it is matched against the key attributes
of the particular element type. For iOS and Android, key attribute is ``id`` for
all elements and locating elements is easy using just the ``id``. For example:

| Click Element    id=my_element

New in AppiumLibrary 1.4, ``id`` and ``xpath`` are not required to be specified,
however ``xpath`` should start with ``//`` else just use ``xpath`` locator as explained below.

For example:

| Click Element    my_element
| Wait Until Page Contains Element    //*[@type="android.widget.EditText"]


Appium additionally supports some of the [https://w3c.github.io/webdriver/webdriver-spec.html|Mobile JSON Wire Protocol] locator strategies.
It is also possible to specify the approach AppiumLibrary should take
to find an element by specifying a lookup strategy with a locator
prefix. Supported strategies are:

| *Strategy*        | *Example*                                                      | *Description*                     | *Note*                      |
| identifier        | Click Element `|` identifier=my_element                        | Matches by @id attribute          |                             |
| id                | Click Element `|` id=my_element                                | Matches by @resource-id attribute |                             |
| accessibility_id  | Click Element `|` accessibility_id=button3                     | Accessibility options utilize.    |                             |
| xpath             | Click Element `|` xpath=//UIATableView/UIATableCell/UIAButton  | Matches with arbitrary XPath      |                             |
| class             | Click Element `|` class=UIAPickerWheel                         | Matches by class                  |                             |
| android           | Click Element `|` android=UiSelector().description('Apps')     | Matches by Android UI Automator   |                             |
| ios               | Click Element `|` ios=.buttons().withName('Apps')              | Matches by iOS UI Automation      |                             |
| nsp               | Click Element `|` nsp=name=="login"                            | Matches by iOSNsPredicate         | Check PR: #196              |
| chain             | Click Element `|` chain=XCUIElementTypeWindow[1]/*             | Matches by iOS Class Chain        |                             |
| css               | Click Element `|` css=.green_button                            | Matches by css in webview         |                             |
| name              | Click Element `|` name=my_element                              | Matches by @name attribute        | *Only valid* for Selendroid |

== Using webelements ==

Starting with version 1.4 of the AppiumLibrary, one can pass an argument
that contains a WebElement instead of a string locator. To get a WebElement,
use the new `Get WebElements` or `Get WebElement` keyword.

For example:
| @{elements}    Get Webelements    class=UIAButton
| Click Element    @{elements}[2]</doc>
<tags>
</tags>
<inits>
<init name="Init" lineno="82">
<arguments repr="timeout=5, run_on_failure=Capture Page Screenshot">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=5">
<name>timeout</name>
<default>5</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="run_on_failure=Capture Page Screenshot">
<name>run_on_failure</name>
<default>Capture Page Screenshot</default>
</arg>
</arguments>
<doc>AppiumLibrary can be imported with optional arguments.

``timeout`` is the default timeout used to wait for all waiting actions.
It can be later set with `Set Appium Timeout`.

``run_on_failure`` specifies the name of a keyword (from any available
libraries) to execute when a AppiumLibrary keyword fails.

By default `Capture Page Screenshot` will be used to take a screenshot of the current page.
Using the value `No Operation` will disable this feature altogether. See
`Register Keyword To Run On Failure` keyword for more information about this
functionality.

Examples:
| Library | AppiumLibrary | 10 | # Sets default timeout to 10 seconds                                                                             |
| Library | AppiumLibrary | timeout=10 | run_on_failure=No Operation | # Sets default timeout to 10 seconds and does nothing on failure           |</doc>
<shortdoc>AppiumLibrary can be imported with optional arguments.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Background App" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="245">
<arguments repr="seconds=5">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="seconds=5">
<name>seconds</name>
<default>5</default>
</arg>
</arguments>
<doc>Puts the application in the background on the device for a certain
duration.</doc>
<shortdoc>Puts the application in the background on the device for a certain duration.</shortdoc>
</kw>
<kw name="Capture Page Screenshot" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_screenshot.py" lineno="15">
<arguments repr="filename=None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename=None">
<name>filename</name>
<default>None</default>
</arg>
</arguments>
<doc>Takes a screenshot of the current page and embeds it into the log.

`filename` argument specifies the name of the file to write the
screenshot into. If no `filename` is given, the screenshot is saved into file
`appium-screenshot-&lt;counter&gt;.png` under the directory where
the Robot Framework log file is written into. The `filename` is
also considered relative to the same directory, if it is not
given in absolute format.

`css` can be used to modify how the screenshot is taken. By default
the bakground color is changed to avoid possible problems with
background leaking when the page layout is somehow broken.</doc>
<shortdoc>Takes a screenshot of the current page and embeds it into the log.</shortdoc>
</kw>
<kw name="Clear Text" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="27">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Clears the text field identified by `locator`.

See `introduction` for details about locating elements.</doc>
<shortdoc>Clears the text field identified by `locator`.</shortdoc>
</kw>
<kw name="Click A Point" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="145">
<arguments repr="x=0, y=0, duration=100">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="x=0">
<name>x</name>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="y=0">
<name>y</name>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="duration=100">
<name>duration</name>
<default>100</default>
</arg>
</arguments>
<doc>Click on a point</doc>
<shortdoc>Click on a point</shortdoc>
</kw>
<kw name="Click Button" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="44">
<arguments repr="index_or_name">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="index_or_name">
<name>index_or_name</name>
</arg>
</arguments>
<doc>Click button</doc>
<shortdoc>Click button</shortdoc>
</kw>
<kw name="Click Element" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="35">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Click element identified by `locator`.

Key attributes for arbitrary elements are `index` and `name`. See
`introduction` for details about locating elements.</doc>
<shortdoc>Click element identified by `locator`.</shortdoc>
</kw>
<kw name="Click Element At Coordinates" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="155">
<arguments repr="coordinate_X, coordinate_Y">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="coordinate_X">
<name>coordinate_X</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="coordinate_Y">
<name>coordinate_Y</name>
</arg>
</arguments>
<doc>click element at a certain coordinate</doc>
<shortdoc>click element at a certain coordinate</shortdoc>
</kw>
<kw name="Click Text" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="52">
<arguments repr="text, exact_match=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="exact_match=False">
<name>exact_match</name>
<default>False</default>
</arg>
</arguments>
<doc>Click text identified by ``text``.

By default tries to click first text involves given ``text``, if you would
like to click exactly matching text, then set ``exact_match`` to `True`.

If there are multiple use  of ``text`` and you do not want first one,
use `locator` with `Get Web Elements` instead.</doc>
<shortdoc>Click text identified by ``text``.</shortdoc>
</kw>
<kw name="Close All Applications" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="25">
<arguments repr="">
</arguments>
<doc>Closes all open applications.

This keyword is meant to be used in test or suite teardown to
make sure all the applications are closed before the test execution
finishes.

After this keyword, the application indices returned by `Open Application`
are reset and start from `1`.</doc>
<shortdoc>Closes all open applications.</shortdoc>
</kw>
<kw name="Close Application" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="20">
<arguments repr="">
</arguments>
<doc>Closes the current application and also close webdriver session.</doc>
<shortdoc>Closes the current application and also close webdriver session.</shortdoc>
</kw>
<kw name="Element Attribute Should Match" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="205">
<arguments repr="locator, attr_name, match_pattern, regexp=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attr_name">
<name>attr_name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="match_pattern">
<name>match_pattern</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="regexp=False">
<name>regexp</name>
<default>False</default>
</arg>
</arguments>
<doc>Verify that an attribute of an element matches the expected criteria.

The element is identified by _locator_. See `introduction` for details
about locating elements. If more than one element matches, the first element is selected.

The _attr_name_ is the name of the attribute within the selected element.

The _match_pattern_ is used for the matching, if the match_pattern is
- boolean or 'True'/'true'/'False'/'false' String then a boolean match is applied
- any other string is cause a string match

The _regexp_ defines whether the string match is done using regular expressions (i.e. BuiltIn Library's
[http://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Match%20Regexp|Should
Match Regexp] or string pattern match (i.e. BuiltIn Library's
[http://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Should%20Match|Should
Match])


Examples:

| Element Attribute Should Match | xpath = //*[contains(@text,'foo')] | text | *foobar |
| Element Attribute Should Match | xpath = //*[contains(@text,'foo')] | text | f.*ar | regexp = True |
| Element Attribute Should Match | xpath = //*[contains(@text,'foo')] | enabled | True |

| 1. is a string pattern match i.e. the 'text' attribute should end with the string 'foobar'
| 2. is a regular expression match i.e. the regexp 'f.*ar' should be within the 'text' attribute
| 3. is a boolead match i.e. the 'enabled' attribute should be True


_*NOTE: *_
On Android the supported attribute names are hard-coded in the
[https://github.com/appium/appium/blob/master/lib/devices/android/bootstrap/src/io/appium/android/bootstrap/AndroidElement.java|AndroidElement]
Class's getBoolAttribute() and getStringAttribute() methods.
Currently supported (appium v1.4.11):
_contentDescription, text, className, resourceId, enabled, checkable, checked, clickable, focusable, focused, longClickable, scrollable, selected, displayed_


_*NOTE: *_
Some attributes can be evaluated in two different ways e.g. these evaluate the same thing:

| Element Attribute Should Match | xpath = //*[contains(@text,'example text')] | name | txt_field_name |
| Element Name Should Be         | xpath = //*[contains(@text,'example text')] | txt_field_name |      |</doc>
<shortdoc>Verify that an attribute of an element matches the expected criteria.</shortdoc>
</kw>
<kw name="Element Name Should Be" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="191">
<arguments repr="locator, expected">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected">
<name>expected</name>
</arg>
</arguments>
<doc />
<shortdoc />
</kw>
<kw name="Element Should Be Disabled" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="154">
<arguments repr="locator, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that element identified with locator is disabled.

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<shortdoc>Verifies that element identified with locator is disabled.</shortdoc>
</kw>
<kw name="Element Should Be Enabled" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="166">
<arguments repr="locator, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that element identified with locator is enabled.

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<shortdoc>Verifies that element identified with locator is enabled.</shortdoc>
</kw>
<kw name="Element Should Be Visible" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="178">
<arguments repr="locator, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that element identified with locator is visible.

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.

New in AppiumLibrary 1.4.5</doc>
<shortdoc>Verifies that element identified with locator is visible.</shortdoc>
</kw>
<kw name="Element Should Contain Text" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="285">
<arguments repr="locator, expected, message=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected">
<name>expected</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message=">
<name>message</name>
<default />
</arg>
</arguments>
<doc>Verifies element identified by ``locator`` contains text ``expected``.

If you wish to assert an exact (not a substring) match on the text
of the element, use `Element Text Should Be`.

Key attributes for arbitrary elements are ``id`` and ``xpath``. ``message`` can be used to override the default error message.

New in AppiumLibrary 1.4.</doc>
<shortdoc>Verifies element identified by ``locator`` contains text ``expected``.</shortdoc>
</kw>
<kw name="Element Should Not Contain Text" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="304">
<arguments repr="locator, expected, message=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected">
<name>expected</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message=">
<name>message</name>
<default />
</arg>
</arguments>
<doc>Verifies element identified by ``locator`` does not contain text ``expected``.

``message`` can be used to override the default error message.
See `Element Should Contain Text` for more details.</doc>
<shortdoc>Verifies element identified by ``locator`` does not contain text ``expected``.</shortdoc>
</kw>
<kw name="Element Text Should Be" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="319">
<arguments repr="locator, expected, message=">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected">
<name>expected</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message=">
<name>message</name>
<default />
</arg>
</arguments>
<doc>Verifies element identified by ``locator`` exactly contains text ``expected``.

In contrast to `Element Should Contain Text`, this keyword does not try
a substring match but an exact match on the element identified by ``locator``.

``message`` can be used to override the default error message.

New in AppiumLibrary 1.4.</doc>
<shortdoc>Verifies element identified by ``locator`` exactly contains text ``expected``.</shortdoc>
</kw>
<kw name="Element Value Should Be" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="198">
<arguments repr="locator, expected">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="expected">
<name>expected</name>
</arg>
</arguments>
<doc />
<shortdoc />
</kw>
<kw name="Execute Adb Shell" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="217">
<arguments repr="command, *args">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="command">
<name>command</name>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
</arguments>
<doc>Execute ADB shell commands

Android only.

- _command_ - The ABD shell command
- _args_ - Arguments to send to command

Returns the exit code of ADB shell.

Requires server flag --relaxed-security to be set on Appium server.</doc>
<shortdoc>Execute ADB shell commands</shortdoc>
</kw>
<kw name="Execute Async Script" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="201">
<arguments repr="script">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="script">
<name>script</name>
</arg>
</arguments>
<doc>Inject a snippet of Async-JavaScript into the page for execution in the
context of the currently selected frame (Web context only).

The executed script is assumed to be asynchronous and must signal that is done by
invoking the provided callback, which is always provided as the final argument to the
function.

The value to this callback will be returned to the client.


New in AppiumLibrary 1.5</doc>
<shortdoc>Inject a snippet of Async-JavaScript into the page for execution in the context of the currently selected frame (Web context only).</shortdoc>
</kw>
<kw name="Execute Script" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="189">
<arguments repr="script">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="script">
<name>script</name>
</arg>
</arguments>
<doc>Inject a snippet of JavaScript into the page for execution in the
context of the currently selected frame (Web context only).

The executed script is assumed to be synchronous and the result
of evaluating the script is returned to the client.

New in AppiumLibrary 1.5</doc>
<shortdoc>Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame (Web context only).</shortdoc>
</kw>
<kw name="Get Activity" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="88">
<arguments repr="">
</arguments>
<doc>Retrieves the current activity on the device.

Android only.</doc>
<shortdoc>Retrieves the current activity on the device.</shortdoc>
</kw>
<kw name="Get Appium SessionId" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="163">
<arguments repr="">
</arguments>
<doc>Returns the current session ID as a reference</doc>
<shortdoc>Returns the current session ID as a reference</shortdoc>
</kw>
<kw name="Get Appium Timeout" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="137">
<arguments repr="">
</arguments>
<doc>Gets the timeout in seconds that is used by various keywords.

See `Set Appium Timeout` for an explanation.</doc>
<shortdoc>Gets the timeout in seconds that is used by various keywords.</shortdoc>
</kw>
<kw name="Get Capability" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="335">
<arguments repr="capability_name">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="capability_name">
<name>capability_name</name>
</arg>
</arguments>
<doc>Return the desired capability value by desired capability name</doc>
<shortdoc>Return the desired capability value by desired capability name</shortdoc>
</kw>
<kw name="Get Contexts" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="292">
<arguments repr="">
</arguments>
<doc>Get available contexts.</doc>
<shortdoc>Get available contexts.</shortdoc>
</kw>
<kw name="Get Current Context" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="288">
<arguments repr="">
</arguments>
<doc>Get current context.</doc>
<shortdoc>Get current context.</shortdoc>
</kw>
<kw name="Get Element Attribute" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="365">
<arguments repr="locator, attribute">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attribute">
<name>attribute</name>
</arg>
</arguments>
<doc>Get element attribute using given attribute: name, value,...

Examples:

| Get Element Attribute | locator | name |
| Get Element Attribute | locator | value |</doc>
<shortdoc>Get element attribute using given attribute: name, value,...</shortdoc>
</kw>
<kw name="Get Element Location" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="387">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Get element location

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<shortdoc>Get element location</shortdoc>
</kw>
<kw name="Get Element Size" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="398">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Get element size

Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<shortdoc>Get element size</shortdoc>
</kw>
<kw name="Get Matching Xpath Count" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="422">
<arguments repr="xpath">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xpath">
<name>xpath</name>
</arg>
</arguments>
<doc>Returns number of elements matching ``xpath``

One should not use the `xpath=` prefix for 'xpath'. XPath is assumed.

| *Correct:* |
| ${count}  | Get Matching Xpath Count | //android.view.View[@text='Test'] |
| Incorrect:  |
| ${count}  | Get Matching Xpath Count | xpath=//android.view.View[@text='Test'] |

If you wish to assert the number of matching elements, use
`Xpath Should Match X Times`.

New in AppiumLibrary 1.4.</doc>
<shortdoc>Returns number of elements matching ``xpath``</shortdoc>
</kw>
<kw name="Get Network Connection Status" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="19">
<arguments repr="">
</arguments>
<doc>Returns an integer bitmask specifying the network connection type.

Android only.

See `set network connection status` for more details.</doc>
<shortdoc>Returns an integer bitmask specifying the network connection type.</shortdoc>
</kw>
<kw name="Get Source" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="168">
<arguments repr="">
</arguments>
<doc>Returns the entire source of the current page.</doc>
<shortdoc>Returns the entire source of the current page.</shortdoc>
</kw>
<kw name="Get Text" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="409">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Get element text (for hybrid and mobile browser use `xpath` locator, others might cause problem)

Example:

| ${text} | Get Text | //*[contains(@text,'foo')] |

New in AppiumLibrary 1.4.</doc>
<shortdoc>Get element text (for hybrid and mobile browser use `xpath` locator, others might cause problem)</shortdoc>
</kw>
<kw name="Get Webelement" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="339">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Returns the first [http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement|WebElement] object matching ``locator``.

Example:
| ${element}     | Get Webelement | id=my_element |
| Click Element  | ${element}     |               |

New in AppiumLibrary 1.4.</doc>
<shortdoc>Returns the first [http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement|WebElement] object matching ``locator``.</shortdoc>
</kw>
<kw name="Get Webelements" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="350">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Returns list of [http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement|WebElement] objects matching ``locator``.

Example:
| @{elements}    | Get Webelements | id=my_element |
| Click Element  | @{elements}[2]  |               |

This keyword was changed in AppiumLibrary 1.4 in following ways:
- Name is changed from `Get Elements` to current one.
- Deprecated argument ``fail_on_error``, use `Run Keyword and Ignore Error` if necessary.

New in AppiumLibrary 1.4.</doc>
<shortdoc>Returns list of [http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement|WebElement] objects matching ``locator``.</shortdoc>
</kw>
<kw name="Get Window Height" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="297">
<arguments repr="">
</arguments>
<doc>Get current device height.

Example:
| ${width}       | Get Window Width |
| ${height}      | Get Window Height |
| Click A Point  | ${width}         | ${height} |

New in AppiumLibrary 1.4.5</doc>
<shortdoc>Get current device height.</shortdoc>
</kw>
<kw name="Get Window Width" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="309">
<arguments repr="">
</arguments>
<doc>Get current device width.

Example:
| ${width}       | Get Window Width |
| ${height}      | Get Window Height |
| Click A Point  | ${width}          | ${height} |

New in AppiumLibrary 1.4.5</doc>
<shortdoc>Get current device width.</shortdoc>
</kw>
<kw name="Go Back" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="235">
<arguments repr="">
</arguments>
<doc>Goes one step backward in the browser history.</doc>
<shortdoc>Goes one step backward in the browser history.</shortdoc>
</kw>
<kw name="Go To Url" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="325">
<arguments repr="url">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url">
<name>url</name>
</arg>
</arguments>
<doc>Opens URL in default web browser.

Example:
| Open Application  | http://localhost:4755/wd/hub | platformName=iOS | platformVersion=7.0 | deviceName='iPhone Simulator' | browserName=Safari |
| Go To URL         | http://m.webapp.com          |</doc>
<shortdoc>Opens URL in default web browser.</shortdoc>
</kw>
<kw name="Hide Keyboard" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="90">
<arguments repr="key_name=None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="key_name=None">
<name>key_name</name>
<default>None</default>
</arg>
</arguments>
<doc>Hides the software keyboard on the device. (optional) In iOS, use `key_name` to press
a particular key, ex. `Done`. In Android, no parameters are used.</doc>
<shortdoc>Hides the software keyboard on the device. (optional) In iOS, use `key_name` to press a particular key, ex. `Done`. In Android, no parameters are used.</shortdoc>
</kw>
<kw name="Input Password" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="72">
<arguments repr="locator, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Types the given password into text field identified by `locator`.

Difference between this keyword and `Input Text` is that this keyword
does not log the given password. See `introduction` for details about
locating elements.</doc>
<shortdoc>Types the given password into text field identified by `locator`.</shortdoc>
</kw>
<kw name="Input Text" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="64">
<arguments repr="locator, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Types the given `text` into text field identified by `locator`.

See `introduction` for details about locating elements.</doc>
<shortdoc>Types the given `text` into text field identified by `locator`.</shortdoc>
</kw>
<kw name="Input Value" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="82">
<arguments repr="locator, text">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
</arguments>
<doc>Sets the given value into text field identified by `locator`. This is an IOS only keyword, input value makes use of set_value

See `introduction` for details about locating elements.</doc>
<shortdoc>Sets the given value into text field identified by `locator`. This is an IOS only keyword, input value makes use of set_value</shortdoc>
</kw>
<kw name="Install App" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="156">
<arguments repr="app_path, app_package">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="app_path">
<name>app_path</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="app_package">
<name>app_package</name>
</arg>
</arguments>
<doc>Install App via Appium

Android only.

- app_path - path to app
- app_package - package of install app to verify</doc>
<shortdoc>Install App via Appium</shortdoc>
</kw>
<kw name="Is Keyboard Shown" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="97">
<arguments repr="">
</arguments>
<doc>Return true if Android keyboard is displayed or False if not displayed
No parameters are used.</doc>
<shortdoc>Return true if Android keyboard is displayed or False if not displayed No parameters are used.</shortdoc>
</kw>
<kw name="Landscape" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="282">
<arguments repr="">
</arguments>
<doc>Set the device orientation to LANDSCAPE</doc>
<shortdoc>Set the device orientation to LANDSCAPE</shortdoc>
</kw>
<kw name="Launch Application" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="84">
<arguments repr="">
</arguments>
<doc>Launch application. Application can be launched while Appium session running.
This keyword can be used to launch application during test case or between test cases.

This keyword works while `Open Application` has a test running. This is good practice to `Launch Application`
and `Quit Application` between test cases. As Suite Setup is `Open Application`, `Test Setup` can be used to `Launch Application`

Example (syntax is just a representation, refer to RF Guide for usage of Setup/Teardown):
| [Setup Suite] |
|  | Open Application | http://localhost:4723/wd/hub | platformName=Android | deviceName=192.168.56.101:5555 | app=${CURDIR}/demoapp/OrangeDemoApp.apk |
| [Test Setup] |
|  | Launch Application |
|  |  | &lt;&lt;&lt;test execution&gt;&gt;&gt; |
|  |  | &lt;&lt;&lt;test execution&gt;&gt;&gt; |
| [Test Teardown] |
|  | Quit Application |
| [Suite Teardown] |
|  | Close Application |

See `Quit Application` for quiting application but keeping Appium sesion running.

New in AppiumLibrary 1.4.6</doc>
<shortdoc>Launch application. Application can be launched while Appium session running. This keyword can be used to launch application during test case or between test cases.</shortdoc>
</kw>
<kw name="Lock" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="239">
<arguments repr="seconds=5">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="seconds=5">
<name>seconds</name>
<default>5</default>
</arg>
</arguments>
<doc>Lock the device for a certain period of time. iOS only.</doc>
<shortdoc>Lock the device for a certain period of time. iOS only.</shortdoc>
</kw>
<kw name="Log Source" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="172">
<arguments repr="loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Logs and returns the entire html source of the current page or frame.

The `loglevel` argument defines the used log level. Valid log levels are
`WARN`, `INFO` (default), `DEBUG`, `TRACE` and `NONE` (no logging).</doc>
<shortdoc>Logs and returns the entire html source of the current page or frame.</shortdoc>
</kw>
<kw name="Long Press" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="112">
<arguments repr="locator, duration=1000">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="duration=1000">
<name>duration</name>
<default>1000</default>
</arg>
</arguments>
<doc>Long press the element with optional duration</doc>
<shortdoc>Long press the element with optional duration</shortdoc>
</kw>
<kw name="Long Press Keycode" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_keyevent.py" lineno="35">
<arguments repr="keycode, metastate=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keycode">
<name>keycode</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="metastate=None">
<name>metastate</name>
<default>None</default>
</arg>
</arguments>
<doc>Sends a long press of keycode to the device.

Android only.

See `press keycode` for more details.</doc>
<shortdoc>Sends a long press of keycode to the device.</shortdoc>
</kw>
<kw name="Open Application" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="39">
<arguments repr="remote_url, alias=None, **kwargs">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="remote_url">
<name>remote_url</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="alias=None">
<name>alias</name>
<default>None</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Opens a new application to given Appium server.
Capabilities of appium server, Android and iOS,
Please check https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md
| *Option*            | *Man.* | *Description*     |
| remote_url          | Yes    | Appium server url |
| alias               | no     | alias             |

Examples:
| Open Application | http://localhost:4723/wd/hub | alias=Myapp1         | platformName=iOS      | platformVersion=7.0            | deviceName='iPhone Simulator'           | app=your.app                         |
| Open Application | http://localhost:4723/wd/hub | platformName=Android | platformVersion=4.2.2 | deviceName=192.168.56.101:5555 | app=${CURDIR}/demoapp/OrangeDemoApp.apk | appPackage=com.netease.qa.orangedemo | appActivity=MainActivity |</doc>
<shortdoc>Opens a new application to given Appium server. Capabilities of appium server, Android and iOS, Please check https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/server-args.md | *Option*            | *Man.* | *Description*     | | remote_url          | Yes    | Appium server url | | alias               | no     | alias             |</shortdoc>
</kw>
<kw name="Open Notifications" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="11">
<arguments repr="">
</arguments>
<doc>Opens and expands an Android device's notification drawer.

Android only.</doc>
<shortdoc>Opens and expands an Android device's notification drawer.</shortdoc>
</kw>
<kw name="Page Should Contain Element" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="129">
<arguments repr="locator, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that current page contains `locator` element.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional `loglevel` argument.
Giving `NONE` as level disables logging.</doc>
<shortdoc>Verifies that current page contains `locator` element.</shortdoc>
</kw>
<kw name="Page Should Contain Text" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="104">
<arguments repr="text, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that current page contains `text`.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional `loglevel` argument.
Giving `NONE` as level disables logging.</doc>
<shortdoc>Verifies that current page contains `text`.</shortdoc>
</kw>
<kw name="Page Should Not Contain Element" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="142">
<arguments repr="locator, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that current page not contains `locator` element.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional `loglevel` argument.
Giving `NONE` as level disables logging.</doc>
<shortdoc>Verifies that current page not contains `locator` element.</shortdoc>
</kw>
<kw name="Page Should Not Contain Text" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="117">
<arguments repr="text, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that current page not contains `text`.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional `loglevel` argument.
Giving `NONE` as level disables logging.</doc>
<shortdoc>Verifies that current page not contains `text`.</shortdoc>
</kw>
<kw name="Pinch" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="23">
<arguments repr="locator, percent=200%, steps=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="percent=200%">
<name>percent</name>
<default>200%</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="steps=1">
<name>steps</name>
<default>1</default>
</arg>
</arguments>
<doc>Pinch in on an element a certain amount.</doc>
<shortdoc>Pinch in on an element a certain amount.</shortdoc>
</kw>
<kw name="Portrait" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="276">
<arguments repr="">
</arguments>
<doc>Set the device orientation to PORTRAIT</doc>
<shortdoc>Set the device orientation to PORTRAIT</shortdoc>
</kw>
<kw name="Press Keycode" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_keyevent.py" lineno="9">
<arguments repr="keycode, metastate=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keycode">
<name>keycode</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="metastate=None">
<name>metastate</name>
<default>None</default>
</arg>
</arguments>
<doc>Sends a press of keycode to the device.

Android only.

Possible keycodes &amp; meta states can be found in
http://developer.android.com/reference/android/view/KeyEvent.html

Meta state describe the pressed state of key modifiers such as
Shift, Ctrl &amp; Alt keys. The Meta State is an integer in which each
bit set to 1 represents a pressed meta key.

For example
- META_SHIFT_ON = 1
- META_ALT_ON = 2

| metastate=1 --&gt; Shift is pressed
| metastate=2 --&gt; Alt is pressed
| metastate=3 --&gt; Shift+Alt is pressed

 - _keycode- - the keycode to be sent to the device
 - _metastate- - status of the meta keys</doc>
<shortdoc>Sends a press of keycode to the device.</shortdoc>
</kw>
<kw name="Pull File" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="45">
<arguments repr="path, decode=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path">
<name>path</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="decode=False">
<name>decode</name>
<default>False</default>
</arg>
</arguments>
<doc>Retrieves the file at `path` and return it's content.

Android only.

 - _path_ - the path to the file on the device
 - _decode_ - True/False decode the data (base64) before returning it (default=False)</doc>
<shortdoc>Retrieves the file at `path` and return it's content.</shortdoc>
</kw>
<kw name="Pull Folder" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="59">
<arguments repr="path, decode=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path">
<name>path</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="decode=False">
<name>decode</name>
<default>False</default>
</arg>
</arguments>
<doc>Retrieves a folder at `path`. Returns the folder's contents zipped.

Android only.

 - _path_ - the path to the folder on the device
 - _decode_ - True/False decode the data (base64) before returning it (default=False)</doc>
<shortdoc>Retrieves a folder at `path`. Returns the folder's contents zipped.</shortdoc>
</kw>
<kw name="Push File" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="73">
<arguments repr="path, data, encode=False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path">
<name>path</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="data">
<name>data</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="encode=False">
<name>encode</name>
<default>False</default>
</arg>
</arguments>
<doc>Puts the data in the file specified as `path`.

Android only.

 - _path_ - the path on the device
 - _data_ - data to be written to the file
 - _encode_ - True/False encode the data as base64 before writing it to the file (default=False)</doc>
<shortdoc>Puts the data in the file specified as `path`.</shortdoc>
</kw>
<kw name="Quit Application" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="110">
<arguments repr="">
</arguments>
<doc>Quit application. Application can be quit while Appium session is kept alive.
This keyword can be used to close application during test case or between test cases.

See `Launch Application` for an explanation.

New in AppiumLibrary 1.4.6</doc>
<shortdoc>Quit application. Application can be quit while Appium session is kept alive. This keyword can be used to close application during test case or between test cases.</shortdoc>
</kw>
<kw name="Register Keyword To Run On Failure" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_runonfailure.py" lineno="17">
<arguments repr="keyword">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keyword">
<name>keyword</name>
</arg>
</arguments>
<doc>Sets the keyword to execute when a AppiumLibrary keyword fails.

`keyword_name` is the name of a keyword (from any available
libraries) that  will be executed if a AppiumLibrary keyword fails.
It is not possible to use a keyword that requires arguments.
Using the value "Nothing" will disable this feature altogether.

The initial keyword to use is set in `importing`, and the
keyword that is used by default is `Capture Page Screenshot`.
Taking a screenshot when something failed is a very useful
feature, but notice that it can slow down the execution.

This keyword returns the name of the previously registered
failure keyword. It can be used to restore the original
value later.

Example:
| Register Keyword To Run On Failure  | Log Source | # Run `Log Source` on failure. |
| ${previous kw}= | Register Keyword To Run On Failure  | Nothing    | # Disables run-on-failure functionality and stores the previous kw name in a variable. |
| Register Keyword To Run On Failure  | ${previous kw} | # Restore to the previous keyword. |

This run-on-failure functionality only works when running tests on Python/Jython 2.4
or newer and it does not work on IronPython at all.</doc>
<shortdoc>Sets the keyword to execute when a AppiumLibrary keyword fails.</shortdoc>
</kw>
<kw name="Remove Application" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="127">
<arguments repr="application_id">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="application_id">
<name>application_id</name>
</arg>
</arguments>
<doc>Removes the application that is identified with an application id

Example:
| Remove Application |  com.netease.qa.orangedemo |</doc>
<shortdoc>Removes the application that is identified with an application id</shortdoc>
</kw>
<kw name="Reset Application" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="121">
<arguments repr="">
</arguments>
<doc>Reset application. Open Application can be reset while Appium session is kept alive.</doc>
<shortdoc>Reset application. Open Application can be reset while Appium session is kept alive.</shortdoc>
</kw>
<kw name="Scroll" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="89">
<arguments repr="start_locator, end_locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_locator">
<name>start_locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_locator">
<name>end_locator</name>
</arg>
</arguments>
<doc>Scrolls from one element to another
Key attributes for arbitrary elements are `id` and `name`. See
`introduction` for details about locating elements.</doc>
<shortdoc>Scrolls from one element to another Key attributes for arbitrary elements are `id` and `name`. See `introduction` for details about locating elements.</shortdoc>
</kw>
<kw name="Scroll Down" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="100">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Scrolls down to element</doc>
<shortdoc>Scrolls down to element</shortdoc>
</kw>
<kw name="Scroll Up" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="106">
<arguments repr="locator">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
</arguments>
<doc>Scrolls up to element</doc>
<shortdoc>Scrolls up to element</shortdoc>
</kw>
<kw name="Set Appium Timeout" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="143">
<arguments repr="seconds">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="seconds">
<name>seconds</name>
</arg>
</arguments>
<doc>Sets the timeout in seconds used by various keywords.

There are several `Wait ...` keywords that take timeout as an
argument. All of these timeout arguments are optional. The timeout
used by all of them can be set globally using this keyword.

The previous timeout value is returned by this keyword and can
be used to set the old value back later. The default timeout
is 5 seconds, but it can be altered in `importing`.

Example:
| ${orig timeout} = | Set Appium Timeout | 15 seconds |
| Open page that loads slowly |
| Set Appium Timeout | ${orig timeout} |</doc>
<shortdoc>Sets the timeout in seconds used by various keywords.</shortdoc>
</kw>
<kw name="Set Location" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="168">
<arguments repr="latitude, longitude, altitude=10">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="latitude">
<name>latitude</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="longitude">
<name>longitude</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="altitude=10">
<name>altitude</name>
<default>10</default>
</arg>
</arguments>
<doc>Set location

- _latitute_
- _longitude_
- _altitude_ = 10 [optional]

Android only.
New in AppiumLibrary 1.5</doc>
<shortdoc>Set location</shortdoc>
</kw>
<kw name="Set Network Connection Status" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="29">
<arguments repr="connectionStatus">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="connectionStatus">
<name>connectionStatus</name>
</arg>
</arguments>
<doc>Sets the network connection Status.

Android only.

Possible values:
    | =Value= | =Alias=          | =Data= | =Wifi= | =Airplane Mode=  |
    |  0      | (None)           | 0      |   0    | 0                |
    |  1      | (Airplane Mode)  | 0      |   0    | 1                |
    |  2      | (Wifi only)      | 0      |   1    | 0                |
    |  4      | (Data only)      | 1      |   0    | 0                |
    |  6      | (All network on) | 1      |   1    | 0                |</doc>
<shortdoc>Sets the network connection Status.</shortdoc>
</kw>
<kw name="Shake" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="270">
<arguments repr="">
</arguments>
<doc>Shake the device</doc>
<shortdoc>Shake the device</shortdoc>
</kw>
<kw name="Start Activity" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="97">
<arguments repr="appPackage, appActivity, **opts">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="appPackage">
<name>appPackage</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="appActivity">
<name>appActivity</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**opts">
<name>opts</name>
</arg>
</arguments>
<doc>Opens an arbitrary activity during a test. If the activity belongs to
another application, that application is started and the activity is opened.

Android only.

- _appPackage_ - The package containing the activity to start.
- _appActivity_ - The activity to start.
- _appWaitPackage_ - Begin automation after this package starts (optional).
- _appWaitActivity_ - Begin automation after this activity starts (optional).
- _intentAction_ - Intent to start (opt_ional).
- _intentCategory_ - Intent category to start (optional).
- _intentFlags_ - Flags to send to the intent (optional).
- _optionalIntentArguments_ - Optional arguments to the intent (optional).
- _dontStopAppOnReset_ - Should the app be stopped on reset (optional)?</doc>
<shortdoc>Opens an arbitrary activity during a test. If the activity belongs to another application, that application is started and the activity is opened.</shortdoc>
</kw>
<kw name="Start Screen Recording" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_screenrecord.py" lineno="16">
<arguments repr="timeLimit=180s, **options">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeLimit=180s">
<name>timeLimit</name>
<default>180s</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**options">
<name>options</name>
</arg>
</arguments>
<doc>Starts an asynchronous Screen Recording for the current open application.

``timeLimit`` sets the actual time limit of the recorded video.
  - The default value for both iOS and Android is 180 seconds (3 minutes).
  - The maximum value for Android is 3 minutes.
  - The maximum value for iOS is 10 minutes.

=== Optional Args ===

 - ``bitRate`` (Android Only) The video bit rate for the video, in megabits per second.
    4 Mbp/s(4000000) is by default for Android API level below 27.                                    20 Mb/s(20000000) for API level 27 and above.

 - ``videoSize`` (Android Only) The format is widthxheight. The default value is the                device's native display resolution (if supported), 1280x720 if not. For best                        results, use a size supported by your device's Advanced Video Coding (AVC)                          encoder. For example, "1280x720"

 - ``bugReport`` (Android Only) Set it to true in order to display additional                       information on the video overlay, such as a timestamp, that is helpful in                           videos captured to illustrate bugs. This option is only supported since                             API level 27 (Android O).

 - ``videoQuality`` (iOS Only) The video encoding quality (low, medium, high,                       photo - defaults to medium).

 - ``videoFps``         (iOS Only) The Frames Per Second rate of the recorded video.                    Change this value if the resulting video is too slow or too fast. Defaults to 10.                   This can decrease the resulting file size.

 - ``videoScale`` (iOS Only) The scaling value to apply. Read                                       https://trac.ffmpeg.org/wiki/Scaling for possible values. Example value of 720p                     scaling is '1280:720'. This can decrease/increase the resulting file size.                          No scale is applied by default.

`Start Screen Recording` is used hand in hand with `Stop Screen Recording`.
See `Stop Screen Recording` for more details.
Example:
    | `Start Screen Recording`  |                   | # starts a screen record session  |
    | ....     keyword actions  |                   |                                   |
    | `Stop Screen Recording`   | filename=output   | # saves the recorded session      |</doc>
<shortdoc>Starts an asynchronous Screen Recording for the current open application.</shortdoc>
</kw>
<kw name="Stop Screen Recording" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_screenrecord.py" lineno="68">
<arguments repr="filename=None, **options">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="filename=None">
<name>filename</name>
<default>None</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**options">
<name>options</name>
</arg>
</arguments>
<doc>Gathers the output from the previously started screen recording              to a media file, then embeds it to the log.html(Android Only).

Requires an active or exhausted Screen Recording Session.
See `Start Screen Recording` for more details.

=== Optional Args ===

 - ``remotePath`` The path to the remote location, where the resulting video should be              uploaded. The following protocols are supported _http/https_, ftp. Null or empty                  string value (the default setting) means the content of resulting file should                       be encoded as Base64 and passed as the endpoint response value. An                                  exception will be thrown if the generated media file is too big to fit                              into the available process memory.

 - ``username`` The name of the user for the remote authentication.

 - ``password`` The password for the remote authentication.

 - ``method`` The http multipart upload method name. The _PUT_ one is used by default.

Example:
    | `Start Screen Recording`  |                   | # starts a screen record session  |
    | ....     keyword actions  |                   |                                   |
    | `Stop Screen Recording`   | filename=output   | # saves the recorded session      |</doc>
<shortdoc>Gathers the output from the previously started screen recording              to a media file, then embeds it to the log.html(Android Only).</shortdoc>
</kw>
<kw name="Swipe" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="31">
<arguments repr="start_x, start_y, offset_x, offset_y, duration=1000">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_x">
<name>start_x</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_y">
<name>start_y</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="offset_x">
<name>offset_x</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="offset_y">
<name>offset_y</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="duration=1000">
<name>duration</name>
<default>1000</default>
</arg>
</arguments>
<doc>Swipe from one point to another point, for an optional duration.

Args:
 - start_x - x-coordinate at which to start
 - start_y - y-coordinate at which to start
 - offset_x - x-coordinate distance from start_x at which to stop
 - offset_y - y-coordinate distance from start_y at which to stop
 - duration - (optional) time to take the swipe, in ms.

Usage:
| Swipe | 500 | 100 | 100 | 0 | 1000 |

_*NOTE: *_
Android 'Swipe' is not working properly, use ``offset_x`` and ``offset_y`` as if these are destination points.</doc>
<shortdoc>Swipe from one point to another point, for an optional duration.</shortdoc>
</kw>
<kw name="Swipe By Percent" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="55">
<arguments repr="start_x, start_y, end_x, end_y, duration=1000">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_x">
<name>start_x</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_y">
<name>start_y</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_x">
<name>end_x</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_y">
<name>end_y</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="duration=1000">
<name>duration</name>
<default>1000</default>
</arg>
</arguments>
<doc>Swipe from one percent of the screen to another percent, for an optional duration.
Normal swipe fails to scale for different screen resolutions, this can be avoided using percent.

Args:
 - start_x - x-percent at which to start
 - start_y - y-percent at which to start
 - end_x - x-percent distance from start_x at which to stop
 - end_y - y-percent distance from start_y at which to stop
 - duration - (optional) time to take the swipe, in ms.

Usage:
| Swipe By Percent | 90 | 50 | 10 | 50 | # Swipes screen from right to left. |

_*NOTE: *_
This also considers swipe acts different between iOS and Android.

New in AppiumLibrary 1.4.5</doc>
<shortdoc>Swipe from one percent of the screen to another percent, for an optional duration. Normal swipe fails to scale for different screen resolutions, this can be avoided using percent.</shortdoc>
</kw>
<kw name="Switch Application" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="58">
<arguments repr="index_or_alias">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="index_or_alias">
<name>index_or_alias</name>
</arg>
</arguments>
<doc>Switches the active application by index or alias.

`index_or_alias` is either application index (an integer) or alias
(a string). Index is got as the return value of `Open Application`.

This keyword returns the index of the previous active application,
which can be used to switch back to that application later.

Example:
| ${appium1}=              | Open Application  | http://localhost:4723/wd/hub                   | alias=MyApp1 | platformName=iOS | platformVersion=7.0 | deviceName='iPhone Simulator' | app=your.app |
| ${appium2}=              | Open Application  | http://localhost:4755/wd/hub                   | alias=MyApp2 | platformName=iOS | platformVersion=7.0 | deviceName='iPhone Simulator' | app=your.app |
| Click Element            | sendHello         | # Executed on appium running at localhost:4755 |
| Switch Application       | ${appium1}        | # Switch using index                           |
| Click Element            | ackHello          | # Executed on appium running at localhost:4723 |
| Switch Application       | MyApp2            | # Switch using alias                           |
| Page Should Contain Text | ackHello Received | # Executed on appium running at localhost:4755 |</doc>
<shortdoc>Switches the active application by index or alias.</shortdoc>
</kw>
<kw name="Switch To Context" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="321">
<arguments repr="context_name">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="context_name">
<name>context_name</name>
</arg>
</arguments>
<doc>Switch to a new context</doc>
<shortdoc>Switch to a new context</shortdoc>
</kw>
<kw name="Tap" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="119">
<arguments repr="locator, x_offset=None, y_offset=None, count=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="x_offset=None">
<name>x_offset</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="y_offset=None">
<name>y_offset</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="count=1">
<name>count</name>
<default>1</default>
</arg>
</arguments>
<doc>Tap element identified by ``locator``. 

Args:
- ``locator`` - (mandatory). Taps coordinates when set to ${None}.
- ``x_offset`` - (optional) x coordinate to tap, relative to the top left corner of the element.
- ``y_offset`` - (optional) y coordinate. If y is used, x must also be set, and vice versa
- ``count`` - can be used for multiple times of tap on that element</doc>
<shortdoc>Tap element identified by ``locator``. </shortdoc>
</kw>
<kw name="Tap With Number Of Taps" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="133">
<arguments repr="locator, number_of_taps, number_of_touches">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="number_of_taps">
<name>number_of_taps</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="number_of_touches">
<name>number_of_touches</name>
</arg>
</arguments>
<doc>Sends one or more taps with one or more touch points.iOS only.

Args:
- ``number_of_taps`` - The number of taps.
- ``number_of_touches`` - The number of touch points.</doc>
<shortdoc>Sends one or more taps with one or more touch points.iOS only.</shortdoc>
</kw>
<kw name="Text Should Be Visible" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="440">
<arguments repr="text, exact_match=False, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="exact_match=False">
<name>exact_match</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that element identified with text is visible.

New in AppiumLibrary 1.4.5</doc>
<shortdoc>Verifies that element identified with text is visible.</shortdoc>
</kw>
<kw name="Toggle Touch Id Enrollment" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="262">
<arguments repr="">
</arguments>
<doc>Toggle Touch ID enrolled state on iOS Simulator

New in AppiumLibrary 1.5</doc>
<shortdoc>Toggle Touch ID enrolled state on iOS Simulator</shortdoc>
</kw>
<kw name="Touch Id" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_applicationmanagement.py" lineno="252">
<arguments repr="match=True">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="match=True">
<name>match</name>
<default>True</default>
</arg>
</arguments>
<doc>Simulate Touch ID on iOS Simulator

`match` (boolean) whether the simulated fingerprint is valid (default true)

New in AppiumLibrary 1.5</doc>
<shortdoc>Simulate Touch ID on iOS Simulator</shortdoc>
</kw>
<kw name="Wait Activity" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_android_utils.py" lineno="138">
<arguments repr="activity, timeout, interval=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="activity">
<name>activity</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="timeout">
<name>timeout</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="interval=1">
<name>interval</name>
<default>1</default>
</arg>
</arguments>
<doc>Wait for an activity: block until target activity presents
or time out.

Android only.

 - _activity_ - target activity
 - _timeout_ - max wait time, in seconds
 - _interval_ - sleep interval between retries, in seconds</doc>
<shortdoc>Wait for an activity: block until target activity presents or time out.</shortdoc>
</kw>
<kw name="Wait Until Element Is Visible" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_waiting.py" lineno="7">
<arguments repr="locator, timeout=None, error=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=None">
<name>timeout</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error=None">
<name>error</name>
<default>None</default>
</arg>
</arguments>
<doc>Waits until element specified with `locator` is visible.

Fails if `timeout` expires before the element is visible. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Contains`, `Wait Until Page Contains 
Element`, `Wait For Condition` and BuiltIn keyword `Wait Until Keyword
Succeeds`.</doc>
<shortdoc>Waits until element specified with `locator` is visible.</shortdoc>
</kw>
<kw name="Wait Until Page Contains" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_waiting.py" lineno="30">
<arguments repr="text, timeout=None, error=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=None">
<name>timeout</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error=None">
<name>error</name>
<default>None</default>
</arg>
</arguments>
<doc>Waits until `text` appears on current page.

Fails if `timeout` expires before the text appears. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Does Not Contain`,
`Wait Until Page Contains Element`,
`Wait Until Page Does Not Contain Element` and
BuiltIn keyword `Wait Until Keyword Succeeds`.</doc>
<shortdoc>Waits until `text` appears on current page.</shortdoc>
</kw>
<kw name="Wait Until Page Contains Element" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_waiting.py" lineno="72">
<arguments repr="locator, timeout=None, error=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=None">
<name>timeout</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error=None">
<name>error</name>
<default>None</default>
</arg>
</arguments>
<doc>Waits until element specified with `locator` appears on current page.

Fails if `timeout` expires before the element appears. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Contains`,
`Wait Until Page Does Not Contain`
`Wait Until Page Does Not Contain Element`
and BuiltIn keyword `Wait Until Keyword Succeeds`.</doc>
<shortdoc>Waits until element specified with `locator` appears on current page.</shortdoc>
</kw>
<kw name="Wait Until Page Does Not Contain" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_waiting.py" lineno="48">
<arguments repr="text, timeout=None, error=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="text">
<name>text</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=None">
<name>timeout</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error=None">
<name>error</name>
<default>None</default>
</arg>
</arguments>
<doc>Waits until `text` disappears from current page.

Fails if `timeout` expires before the `text` disappears. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Contains`,
`Wait Until Page Contains Element`,
`Wait Until Page Does Not Contain Element` and
BuiltIn keyword `Wait Until Keyword Succeeds`.</doc>
<shortdoc>Waits until `text` disappears from current page.</shortdoc>
</kw>
<kw name="Wait Until Page Does Not Contain Element" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_waiting.py" lineno="90">
<arguments repr="locator, timeout=None, error=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=None">
<name>timeout</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error=None">
<name>error</name>
<default>None</default>
</arg>
</arguments>
<doc>Waits until element specified with `locator` disappears from current page.

Fails if `timeout` expires before the element disappears. See
`introduction` for more information about `timeout` and its
default value.

`error` can be used to override the default error message.

See also `Wait Until Page Contains`,
`Wait Until Page Does Not Contain`,
`Wait Until Page Contains Element` and
BuiltIn keyword `Wait Until Keyword Succeeds`.</doc>
<shortdoc>Waits until element specified with `locator` disappears from current page.</shortdoc>
</kw>
<kw name="Xpath Should Match X Times" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_element.py" lineno="450">
<arguments repr="xpath, count, error=None, loglevel=INFO">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xpath">
<name>xpath</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="count">
<name>count</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error=None">
<name>error</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="loglevel=INFO">
<name>loglevel</name>
<default>INFO</default>
</arg>
</arguments>
<doc>Verifies that the page contains the given number of elements located by the given ``xpath``.

One should not use the `xpath=` prefix for 'xpath'. XPath is assumed.

| *Correct:* |
| Xpath Should Match X Times | //android.view.View[@text='Test'] | 1 |
| Incorrect: |
| Xpath Should Match X Times | xpath=//android.view.View[@text='Test'] | 1 |

``error`` can be used to override the default error message.

See `Log Source` for explanation about ``loglevel`` argument.

New in AppiumLibrary 1.4.</doc>
<shortdoc>Verifies that the page contains the given number of elements located by the given ``xpath``.</shortdoc>
</kw>
<kw name="Zoom" source="D:\Users\9uS\AppData\Local\Programs\Python\Python39\Lib\site-packages\AppiumLibrary\keywords\_touch.py" lineno="15">
<arguments repr="locator, percent=200%, steps=1">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locator">
<name>locator</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="percent=200%">
<name>percent</name>
<default>200%</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="steps=1">
<name>steps</name>
<default>1</default>
</arg>
</arguments>
<doc>Zooms in on an element a certain amount.</doc>
<shortdoc>Zooms in on an element a certain amount.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
</keywordspec>